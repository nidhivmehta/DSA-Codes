bool isCycle(int s, vector<int> &vis, int n, vector<vector<int>>& edges) {
    queue<pair<int, int>> q;
    vis[s] = 1;
    q.push({s, -1});
    
    while(!q.empty()) {
        int node = q.front().first;
        int parent = q.front().second();
        q.pop();
        for(auto x: edge[node]) {
            if(!vis[x]) {
                vis[x] = 1;
                q.push({x, node});
            }
            else if(x != parent)
                return true;
        }
    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    vector<int> adj[n+1];
    for(int i = 0;i<m;i++) {
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
    
    vector<int> vis(n+1, 0);
    for(int i=1; i<=n; i++) {
        if(!vis[i]){
            if(isCycle(i, vis, n, edge))
                return "yes";
            }
    }
    return "No";
}
